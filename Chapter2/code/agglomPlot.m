webs = 1:12;
nWebs = numel(webs);
props = cell(nWebs,1);

numLocalProps = 18;
numGlobalProps = 15;

localNames = {'vulFree' ...
            ,'vulPara'        ...
            ,'genFree'        ...
            ,'genPara'        ...
            ,'patlFree'       ...
            ,'patlPara'       ...
            ,'ccFree'         ...
            ,'ccPara'         ...
            ,'prFree'         ...
            ,'prPara'         ...
            ,'btwnFree'       ...
            ,'btwnPara'       ...
            ,'ecoBtwnFree'    ...
            ,'ecoBtwnPara'    ...
            ,'meanVulPreyFree'...
            ,'meanVulPreyPara'...
            ,'meanGenPredFree'...
            ,'meanGenPredPara'...
            };


globalNames = {  'S'            ...
              ,'nNodes'         ...
              ,'Ccon'           ...
              ,'Cff'            ...
              ,'Cpp'            ...
              ,'Cfp'            ...
              ,'Cpf'            ...
              ,'fPar'           ...
              ,'numLargest'     ...
              ,'n'              ...
              ,'top'            ...
              ,'int'            ...
              ,'bas'            ...
              ,'herb'           ...
              ,'omn'            ...
              ,'C'              ...
              };


propStruct = struct('global',[]...
                       ,'local',[]...
                       ,'corrMatrices',[]...
                       );

meanVarStructure = struct('sum',propStruct...
                          ,'sq',propStruct...
                          ,'mean',propStruct...
                          ,'var',propStruct...
                         );
                   
linkageStructure = struct('max',meanVarStructure...
                          ,'mean',meanVarStructure...
                          ,'min',meanVarStructure...
                              );

[props{:}] = deal(linkageStructure);
nReps = 50;
for ii = webs
    ii
    %This replicates the agglomeration procedure; account for any
    %randomness in the agglomeration method.
    if ii <7
        res = linkListCell{ii}(:,1);
        con = linkListCell{ii}(:,2);
        para = propertiesCell{ii,2};
        S = numel(para);
    elseif ii>=7
        res = linkListCell{ii-6}(:,1);
        con = linkListCell{ii-6}(:,2);
        S = max([res;con]);
        L = numel(res);
        C = L/S^2;
        nPar = sum(propertiesCell{ii-6,2});
        nCon = S - numel(setdiff(res,con));
        fPar = nPar/nCon;
        %ALWAYS need 100 repetitions of the niche models, to get an average
        %response.
        nReps = 100;
    end
    
    
     localZeros = zeros(S,numLocalProps);
     globalZeros = zeros(S,numGlobalProps+1);
     corrZeros = zeros(9,9,S);
    [props{ii}.max.sum.global,...
     props{ii}.max.sq.global,...
     props{ii}.mean.sum.global,...
     props{ii}.mean.sq.global,...
     props{ii}.min.sum.global,...
     props{ii}.min.sq.global] = deal(globalZeros);
    
     [props{ii}.max.sum.local,...
     props{ii}.max.sq.local,...
     props{ii}.mean.sum.local,...
     props{ii}.mean.sq.local,...
     props{ii}.min.sum.local,...
     props{ii}.min.sq.local] = deal(localZeros);
    
    [props{ii}.max.sum.corr,...
        props{ii}.max.sq.corr] = deal(corrZeros);
    for jj = 1:nReps
        if ii >= 7
            
            [res, con] = NicheModel_nk(S,C);
            consumers = unique(con);
            nCon = numel(consumers);
            para = false(S,1);
            nPar = round(fPar*nCon);
            paraIds = randsample(consumers,nPar);
            para(paraIds) = true;
        end
        [propMax, propMean, propMin] = agglom(res,con,para);
        %
        props{ii}.max.sum.global= props{ii}.max.sum.global+ propMax.global;
        props{ii}.max.sq.global= props{ii}.max.sq.global+ propMax.global.^2;
        
        props{ii}.max.sum.local = props{ii}.max.sum.local+propMax.local;
        props{ii}.max.sq.local = props{ii}.max.sq.local+propMax.local.^2;
        
        props{ii}.max.sum.corr = props{ii}.max.sum.corr + propMax.corr;
        props{ii}.max.sq.corr = props{ii}.max.sq.corr + propMax.corr.^2;
        
        %{
        props{ii}.mean.sum.global= props{ii}.mean.sum.global+ propMean.global;
        props{ii}.mean.sq.global= props{ii}.mean.sq.global+ propMean.global.^2;
        
        props{ii}.mean.sum.local = props{ii}.mean.sum.local+propMean.local;
        props{ii}.mean.sq.local = props{ii}.mean.sq.local+propMean.local.^2;
        %
        props{ii}.min.sum.global= props{ii}.min.sum.global+ propMin.global;
        props{ii}.min.sq.global= props{ii}.min.sq.global+ propMin.global.^2;
        
        props{ii}.min.sum.local = props{ii}.min.sum.local+propMin.local;
        props{ii}.min.sq.local = props{ii}.min.sq.local+propMin.local.^2;
        %}
    end
    
    props{ii}.max.mean.global = props{ii}.max.sum.global/nReps;
    props{ii}.max.var.global = props{ii}.max.sq.global/(nReps-1) - (nReps/(nReps - 1))*props{ii}.max.mean.global.^2;
    props{ii}.max.mean.global = array2table(props{ii}.max.mean.global,'VariableNames',globalNames);
    props{ii}.max.var.global = array2table(props{ii}.max.var.global,'VariableNames',globalNames); 
    
    props{ii}.max.mean.local = props{ii}.max.sum.local/nReps;
    props{ii}.max.var.local = props{ii}.max.sq.local/(nReps-1) - (nReps/(nReps - 1))*props{ii}.max.mean.local.^2;
    props{ii}.max.mean.local = array2table(props{ii}.max.mean.local,'VariableNames',localNames);
    props{ii}.max.var.local = array2table(props{ii}.max.var.local,'VariableNames',localNames); 
    
    props{ii}.max.mean.corrMatrices = props{ii}.max.sum.corrMatrices/nReps;
    props{ii}.max.var.local = props{ii}.max.sq.corrMatrices/(nReps-1) - (nReps/(nReps - 1))*props{ii}.max.mean.corrMatrices.^2;
    %{
    props{ii}.mean.mean.global = props{ii}.mean.sum.global/nReps;
    props{ii}.mean.var.global = props{ii}.mean.sq.global/(nReps-1) - (nReps/(nReps - 1))*props{ii}.mean.mean.global.^2;
    props{ii}.mean.mean.global = array2table(props{ii}.mean.mean.global,'VariableNames',globalNames);
    props{ii}.mean.var.global = array2table(props{ii}.mean.var.global,'VariableNames',globalNames); 
    
    props{ii}.mean.mean.local = props{ii}.mean.sum.local/nReps;
    props{ii}.mean.var.local = props{ii}.mean.sq.local/(nReps-1) - (nReps/(nReps - 1))*props{ii}.mean.mean.local.^2;
    props{ii}.mean.mean.local = array2table(props{ii}.mean.mean.local,'VariableNames',localNames);
    props{ii}.mean.var.local = array2table(props{ii}.mean.var.local,'VariableNames',localNames); 
    %
    props{ii}.min.mean.global = props{ii}.min.sum.global/nReps;
    props{ii}.min.var.global = props{ii}.min.sq.global/(nReps-1) - (nReps/(nReps - 1))*props{ii}.min.mean.global.^2;
    props{ii}.min.mean.global = array2table(props{ii}.min.mean.global,'VariableNames',globalNames);
    props{ii}.min.var.global = array2table(props{ii}.min.var.global,'VariableNames',globalNames); 
    
    props{ii}.min.mean.local = props{ii}.min.sum.local/nReps;
    props{ii}.min.var.local = props{ii}.min.sq.local/(nReps-1) - (nReps/(nReps - 1))*props{ii}.min.mean.local.^2;
    props{ii}.min.mean.local = array2table(props{ii}.min.mean.local,'VariableNames',localNames);
    props{ii}.min.var.local = array2table(props{ii}.min.var.local,'VariableNames',localNames); 
    %}
    %}
end

save('AgglomerationProps.mat','props')